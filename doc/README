//////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 Andreas Milton Maniotis
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//////////////////////////////////////////////////////////////////////////////////////////


PURPOSE:
==========================================================================================

Nargs is a non-intrusive generative framework which endows callable objects in C++
with the Python-feature of named arguments.

Nargs can be used to generate new interfaces, but it can also serve as a tool
for non-intrusive improvement of the safety and readability of existing interfaces.


MOTIVATION:
==========================================================================================

a) A SIMPLE USE CASE EXAMPLE WITH NAMED ARGUMENTS

Software developers are often confronted with function interfaces that are error-prone
and possibly difficult to memorize. For example, let us consider the OpenGL function
gluBuild2DMipmaps:


    GLint gluBuild2DMipmaps(
            GLenum  target,
 	    GLint   internalFormat,
 	    GLsizei width,
 	    GLsizei height,
 	    GLenum  format,
 	    GLenum  type,
 	    const void * data);
 
The purpose of this function is not important to us. We are only interested in the many
opportunities of misusing the function: We have many elements of identical type, so it is
possible to confuse the order of inputs without receiving an error message or at least
a warning at compile time. Obviously, it is not advisable to make intrusive changes int
the C-API of OpenGL. In Nargs, we can improve the interface with a few lines of
code:


    NARG_PAIR(Target,          GLenum);  // macro that generates a wrapper class for
                                         // the parameter GLenum target
    NARG_PAIR(InternalFormat,   GLint);  // macro that generates a wrapper class for
                                         // the parameter GLint internalFormat
    NARG_PAIR(Width,          GLsizei);  // ...
    NARG_PAIR(Height,         GLsizei);  // ...
    NARG_PAIR(Format,          GLenum);
    NARG_PAIR(Type,            GLenum);
    NARG_PAIR(Data,       const void*);

    auto improved_funtion =
      nargs::signature<Target, InternalFormat,
                       Width,  Height,
		       Format, Type, Data     >::callable( & gluBuild2dMipmaps );


A possible call of the improved function looks as follows:

    GLenum      target_         = ..; // values arise from somewhere in the program
    GLint       internalFormat_ = ..;
    GLsizei     width_          = ..;
    GLsizei     height_         = ..;
    GLenum      format_         = ..;
    GLenum      type_           = ..;
    const void* data_           = ..;

    improved_function( Target(target_), InternalFormat(internalFormat_),
	    	       Width(width_),   Height(height_),
		       Format(format_), Type(type_), Data(data_) );


In the call of the function 'improved_function' above the order of the parameter wrappers
follows the order of the wrapped elements in the signature of the original function
gluBuild2DMipMaps. That however is not necessary. We can list the 7 wrapped parameters in
any of the 7! = 5040 possible orders. For instance the following call leads to the same
result:

    improved_function(Format(format_), Type(type_), Data(data_),
	   	      InternalFormat(internalFormat_), Target(target_), 
		      Height(height_), Width(width_) );

The full example can be found in the listing examples/example-gl-function.cpp

b) A BUILDER EXAMPLE:

Consider the following class for a date:

    struct date
    {
    public:
	date(int d, int m, int y) {  assert_validity_of_this_date(); }

	int get_day()   const { return day_;   }  // range: 1..31
    	int get_month() const { return month_; }  // range: 1..12
    	int get_year()  const { return year_;  } 

    private:
	int day_, month_, year_;
    	void assert_validity_of_this_date() { //throw exception if date is invalid... }
    };

Regardless how carefully we implement the assertion method check_validity_of_this_date()
to ensure the validity of an input made by a user of the class, there is a certain risk
inherent to the interface of the class, which cannot be eliminated. For instance a user
might be accustomed to the order mm-dd-yyyy (mm month, dd day, yyyy year) for dates. If
the user calls the date constructor
   
    date(2, 3, 2016),

then the valid date "March, 2nd, 2016" will be constructed. The method
assert_validity_of_this() cannot detect that the user wanted "February, 3rd, 2016" as
both dates are valid inputs. If we are able or willing to change the source code of date,
this ambiguity problem can be fixed easily. But in many situations it is impossible or
undesirable to change given source code with ambiguous interfaces. Then nargs gives a fast
and easy non-intrusive solution. This can be done in four lines: 


    NARG_PAIR(day,   int); 
    NARG_PAIR(month, int);
    NARG_PAIR(year,  int);

    auto create_date = signature<day, month, year>::builder<date>();


create_date is a safe builder for dates. We need not bother about the order of the
parameters in the construction process of  dates. All of the six calls of create_date with
permuted arguments  will create "February, 3rd, 2016": 


    create_date(year(2016), month(2), day(3)); 
    create_date(year(2016), day(3), month(2)); 
    create_date(month(2), year(2016), day(3)); 
    create_date(day(3), year(2016), month(2));
    create_date(day(3), month(2), year(2016)); 
    create_date(month(2), day(3), year(2016)); 


DESIGN-OBJECTIVES:
==========================================================================================

0) Non-Intrusiveness
--------------------

The framework can be applied to existing callables (including class constructors) without
modifying their source code.


1) Perfect Forwarding
---------------------

   Nargs essentially provides a permutation-invariant generalisation of std::invoke. 

Consider n types T_1, ..., T_n, non of which is standard convertible into the other,
elements t1, ..., tn of types T1, ... Tn respectively, and a callable object f of type F
with a call operator F::operator()(T_1, ... T_n).

For an arbitrary permutation s: {1, ..., n} --> {1, ..., n} we can make the following
call:


    nargs::signature<Args...>::invoke(f, t_{s(1)}, ... , t_{s(n)});                  (*)


Irrespective of the choice of s possible invocations (*) evaluate to


    std::invoke(std::forward<F>(f), std::forward<T_1>(t1), ... , std::forward<T_n>(t_n).


Every feature of nargs is based on permutation-invariant invocations as in (*).

Permutation-invariant invocations never involve copying of objects. Instead only
references to objects are internally copied, forwarded, sorted and passed to std::invoke.


2) Fast and easy applicability
------------------------------
Any callable object which takes n arguments can be provided with named arguments semantics
in at most n+1 lines of code that can be entered locally at (almost) any scope.


TODO:
==========================================================================================
Nargs has not reached the status of productive software yet. The most important tasks to
be resolved in the near future:

1) Extension to name overloading with multiple signatures.

   Some preliminary work exists in signatures.hpp. (Previous proof of concept
   implementations worked, but default arguments and a permutation invariant version of
   std::bind was not supported).

2) Improvement of compiler error messages.

   At present, long and misleading compiler error message output is a considerable
   challenge to the practical applicability of nargs.

3) General TMP/Fusion-Features may be implemented using boost.hana.

   Currently parts of a non-published prototypical nucleus of a TMP-library of my own are
   used for this purpose (module kraanerg).

4) Multi-platform support.

   Previous proof of concept implementations were successfully tested with the
   Intel-C++-compiler and with Visual Studio.


COMPILATION:
==========================================================================================
Nargs is a header-only library. It suffices to include either the header nargs.hpp of
signatures.hpp in the directory nargs. The header nargs.hpp include everything, whereas
the header signatures.hpp includes everything except the macro NARG_PAIR. 

Users are not required to use the macro NARG_PAIR.

C++17 prerequisite: Nargs uses the C++17-function std::invoke. Hence it is necessary to
enable C++17 support via the appropriate compiler flags (-std=c++1z for gcc/clang).


API-REFERENCE:
==========================================================================================
Confer to the following files:

nargs.hpp.txt
single_signature.hpp.txt
signatures.hpp.txt


Examples:
==========================================================================================

Examples can be found in ../examples.


Feedback:
==========================================================================================

Feedback is most welcome. Please write to andreas.maniotis@gmail.com.
