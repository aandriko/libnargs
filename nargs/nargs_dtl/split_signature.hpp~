#include "nargs.hpp"
#include "kraanerg/types.hpp"
#include "kraanerg/list.hpp"
#include <type_traits>

namespace nargs               {
namespace split_signature_dtl {

    
    template<typename to>
    struct token
    {
	template<typename from>
	using cast_possible_from = std::is_convertible<from, to>;
    };

    template<typename... args_to_be_bound>
    struct fix_args_to_be_bound
    {
	template<typename member_of_signature>
	struct discriminator
	    : public kraanerg::list<args_to_be_bound...>::template
	      apply_pointwise
	      <
	          token<member_of_signature>::template cast_possible_from
	      >
              ::template apply<kraanerg::logic::exists> // true iff one of args_to_be_bound is castable into member_of_signature
	{ };

	template<typename Signature>
	struct split_signature
	    {
		using partition_ =
		    kraanerg::partition< discriminator, 
					 typename kraanerg::term<Signature>::subterms::template apply<kraanerg::list> >;
		
		enum
		{
		    valid = bool( partition_::first::template apply<kraanerg::count_terms >::value == sizeof...(args_to_be_bound)   )
		};

		
		using bound_signature_in_list = typename std::conditional
		    < valid,
		      kraanerg::list< typename partition_::first::template apply<nargs::signature>  >,
		      kraanerg::list<>
		      >::type;
		
		using free_signature_in_list = typename std::conditional
		    < valid,
		      typename kraanerg::list< typename partition_::second::template apply<nargs::signature> > ,
		      kraanerg::list<>
		      >::type;
	};
    };
    
} // namespace split_signature_dtl
} // namespace nargs

    
int main()
{
    using partition = 
    kraanerg::partition< std::is_integral,
			 kraanerg::list<int, double*, char, void, long > >;
				
    using split = 
    nargs::split_signature_dtl::
	fix_args_to_be_bound<double, char*>::split_signature<nargs::signature<char*, int, void**> > ;


    {
	using split =
	    nargs::split_signature_dtl::
	    fix_args_to_be_bound<double, char*>::split_signature<
		nargs::signature<void*, void**, int***> >;

//	split::bound_signature_in_list*p = 6;
    }
    split::bound_signature_in_list* p = nullptr;
    split::free_signature_in_list* q = nullptr;
}
